version: '3.8'

services:
  postgres-test:
    image: postgres:15-alpine
    container_name: products_watch_test_postgres
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_TEST_DB:-products_watch_test}
      POSTGRES_USER: ${POSTGRES_TEST_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD:-password}
    ports:
      - "${POSTGRES_TEST_PORT:-5433}:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - products_watch_test_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_TEST_USER:-postgres} -d ${POSTGRES_TEST_DB:-products_watch_test}" ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

  store-service-test:
    build:
      context: .
      dockerfile: src/services/store_service/Dockerfile
    container_name: products_watch_store_service_test
    restart: "no"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_TEST_USER:-postgres}:${POSTGRES_TEST_PASSWORD:-password}@postgres-test:5432/${POSTGRES_TEST_DB:-products_watch_test}
    ports:
      - "8000:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
    networks:
      - products_watch_test_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: [ "python", "-m", "pytest", "tests/integration", "-v" ]

  product-service-test:
    build:
      context: .
      dockerfile: src/services/product_service/Dockerfile
    container_name: products_watch_product_service_test
    restart: "no"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_TEST_USER:-postgres}:${POSTGRES_TEST_PASSWORD:-password}@postgres-test:5432/${POSTGRES_TEST_DB:-products_watch_test}
    ports:
      - "8001:8001"
    depends_on:
      postgres-test:
        condition: service_healthy
    networks:
      - products_watch_test_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: [ "python", "-m", "pytest", "tests/integration", "-v" ]

  price-service-test:
    build:
      context: .
      dockerfile: src/services/price_service/Dockerfile
    container_name: products_watch_price_service_test
    restart: "no"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_TEST_USER:-postgres}:${POSTGRES_TEST_PASSWORD:-password}@postgres-test:5432/${POSTGRES_TEST_DB:-products_watch_test}
    ports:
      - "8002:8002"
    depends_on:
      postgres-test:
        condition: service_healthy
    networks:
      - products_watch_test_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8002/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: [ "python", "-m", "pytest", "tests/integration", "-v" ]

  retail-file-service-test:
    build:
      context: .
      dockerfile: src/services/retail_file_service/Dockerfile
    container_name: products_watch_retail_file_service_test
    restart: "no"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_TEST_USER:-postgres}:${POSTGRES_TEST_PASSWORD:-password}@postgres-test:5432/${POSTGRES_TEST_DB:-products_watch_test}
    ports:
      - "8003:8003"
    depends_on:
      postgres-test:
        condition: service_healthy
    networks:
      - products_watch_test_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8003/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: [ "python", "-m", "pytest", "tests/integration", "-v" ]

volumes:
  postgres_test_data:
    driver: local

networks:
  products_watch_test_network:
    driver: bridge
